// Standard objects by category

// Built-in objects

// JavaScript has several built-in objects, such as Math, Date, Array, and String. These objects have properties and methods that you can use in your code. For example, the Math object has properties like Math.PI and methods like Math.round().

// The built-in objects are organized into the following categories:

// Value properties: These are built-in objects that have a constant value. For example, the Math object has the property Math.PI, which contains the value of PI (3.14159...).

// Example:
console.log(Math.PI); // 3.141592653589793
console.log(globalThis) // globalThis is a global object that always refers to the global object itself, regardless of the environment in which the code is running. In a web browser, the global object is the window object, and in Node.js, it's the global object.
console.log(Infinity) // Infinity is a global object that represents infinity. It's a property of the global object, which means that it's available in any scope. Infinity is a numeric value that represents positive infinity. It's greater than any other number, and you can get it by dividing a positive number by zero.
console.log(NaN) // NaN is a global object that represents "Not-a-Number". It's a property of the global object, which means that it's available in any scope. NaN is a numeric value that represents an unrepresentable value. It's the result of an operation that can't produce a normal result. For example, dividing zero by zero or multiplying infinity by zero produces NaN.
console.log(undefined) // undefined is a global object that represents an undefined value. It's a property of the global object, which means that it's available in any scope. undefined is a primitive value that represents an uninitialized variable or a missing property. It's the default value of variables and object properties that haven't been assigned a value.

// Function properties: These are built-in objects that are functions. For example, the parseInt() function is a property of the global object.

// Example:
console.log(eval()) // eval() is a global function that evaluates a string of JavaScript code in the context of the current scope. It's a property of the global object, which means that it's available in any scope. eval() is a powerful feature that can execute any JavaScript code, including malicious code. It's often used to parse and execute JSON data, but it's generally considered a bad practice because it can introduce security vulnerabilities and make the code harder to understand and maintain.
console.log(eval('2 + 2'));
// Expected output: 4

console.log(isFinite()) // isFinite() is a global function that determines whether a value is a finite number. It's a property of the global object, which means that it's available in any scope. isFinite() is often used to check if a value is a valid number before performing arithmetic operations on it. It returns true if the value is a finite number, and false if it's infinity, negative infinity, or NaN.
console.log(isFinite(Infinity)); // false
console.log(isFinite(0)); // true

console.log(isNaN()) // isNaN() is a global function that determines whether a value is NaN (Not-a-Number). It's a property of the global object, which means that it's available in any scope. isNaN() is often used to check if a value is a valid number before performing arithmetic operations on it. It returns true if the value is NaN, and false if it's a valid number.

console.log(parseFloat()) // parseFloat() is a global function that parses a string and returns a floating-point number. It's a property of the global object, which means that it's available in any scope. parseFloat() is often used to convert user input into a number, but it's generally considered a bad practice because it can introduce security vulnerabilities and make the code harder to understand and maintain.

console.log(parseInt()) // parseInt() is a global function that parses a string and returns an integer. It's a property of the global object, which means that it's available in any scope. parseInt() is often used to convert user input into a number, but it's generally considered a bad practice because it can introduce security vulnerabilities and make the code harder to understand and maintain.

console.log(decodeURI()) // decodeURI() is a global function that decodes a Uniform Resource Identifier (URI) that has been encoded with encodeURI(). It's a property of the global object, which means that it's available in any scope. decodeURI() is often used to decode a URI before displaying it to the user, but it's generally considered a bad practice because it can introduce security vulnerabilities and make the code harder to understand and maintain.

console.log(decodeURIComponent()) // decodeURIComponent() is a global function that decodes a Uniform Resource Identifier (URI) component that has been encoded with encodeURIComponent(). It's a property of the global object, which means that it's available in any scope. decodeURIComponent() is often used to decode a URI component before displaying it to the user, but it's generally considered a bad practice because it can introduce security vulnerabilities and make the code harder to understand and maintain.

console.log(encodeURI()) // encodeURI() is a global function that encodes a Uniform Resource Identifier (URI). It's a property of the global object, which means that it's available in any scope. encodeURI() is often used to encode a URI before sending it to the server, but it's generally considered a bad practice because it can introduce security vulnerabilities and make the code harder to understand and maintain.

console.log(encodeURIComponent()) // encodeURIComponent() is a global function that encodes a Uniform Resource Identifier (URI) component. It's a property of the global object, which means that it's available in any scope. encodeURIComponent() is often used to encode a URI component before sending it to the server, but it's generally considered a bad practice because it can introduce security vulnerabilities and make the code harder to understand and maintain.

console.log(escape()) // Deprecated. Use encodeURI() or encodeURIComponent() instead.
console.log(unescape()) // Deprecated. Use decodeURI() or decodeURIComponent() instead.

// Fundamental objects: These are built-in objects that are used as the building blocks for other objects. For example, the Object object is the base object for all other objects.
// Example:
console.log(Object) // Object is a global object that represents an object in JavaScript. It's a property of the global object, which means that it's available in any scope. Object is the base object for all other objects in JavaScript. It has methods for creating, manipulating, and querying objects. For example, you can use Object.create() to create a new object with a specified prototype object, and Object.keys() to get an array of the keys in an object.
console.log(Function) // Function is a global object that represents a function in JavaScript. It's a property of the global object, which means that it's available in any scope. Function is the base object for all other functions in JavaScript. It has methods for creating, manipulating, and querying functions. For example, you can use Function.prototype.apply() to call a function with a given this value and arguments, and Function.prototype.bind() to create a new function with a given this value and arguments.
console.log(Boolean) // Boolean is a global object that represents a boolean value in JavaScript. It's a property of the global object, which means that it's available in any scope. Boolean is the base object for all other boolean values in JavaScript. It has methods for creating, manipulating, and querying boolean values. For example, you can use Boolean.prototype.valueOf() to get the primitive value of a boolean object, and Boolean.prototype.toString() to get the string representation of a boolean object.
console.log(Symbol) // Symbol is a global object that represents a unique and immutable value in JavaScript. It's a property of the global object, which means that it's available in any scope. Symbol is the base object for all other symbols in JavaScript. It has methods for creating, manipulating, and querying symbols. For example, you can use Symbol.for() to get the symbol for a given key, and Symbol.keyFor() to get the key for a given symbol.

// Error objects: These are built-in objects that represent an error in JavaScript. For example, the Error object is the base object for all other error objects.
// Example:
console.log(Error) // Error is a global object that represents an error in JavaScript. It's a property of the global object, which means that it's available in any scope. Error is the base object for all other error objects in JavaScript. It has methods for creating, manipulating, and querying errors. For example, you can use Error.prototype.toString() to get the string representation of an error object, and Error.prototype.stack to get the stack trace of an error object.
console.log(AggregateError) // AggregateError is a global object that represents an error that occurs when multiple errors are thrown at the same time. It's a property of the global object, which means that it's available in any scope. AggregateError is the base object for all other aggregate error objects in JavaScript. It has methods for creating, manipulating, and querying aggregate errors. For example, you can use AggregateError.prototype.toString() to get the string representation of an aggregate error object, and AggregateError.prototype.stack to get the stack trace of an aggregate error object.
console.log(EvalError) // EvalError is a global object that represents an error that occurs when using the eval() function. It's a property of the global object, which means that it's available in any scope. EvalError is the base object for all other eval error objects in JavaScript. It has methods for creating, manipulating, and querying eval errors. For example, you can use EvalError.prototype.toString() to get the string representation of an eval error object, and EvalError.prototype.stack to get the stack trace of an eval error object.
console.log(RangeError) // RangeError is a global object that represents an error that occurs when a number is not within the range of allowed values. It's a property of the global object, which means that it's available in any scope. RangeError is the base object for all other range error objects in JavaScript. It has methods for creating, manipulating, and querying range errors. For example, you can use RangeError.prototype.toString() to get the string representation of a range error object, and RangeError.prototype.stack to get the stack trace of a range error object.
console.log(ReferenceError) // ReferenceError is a global object that represents an error that occurs when a non-existent variable is referenced. It's a property of the global object, which means that it's available in any scope. ReferenceError is the base object for all other reference error objects in JavaScript. It has methods for creating, manipulating, and querying reference errors. For example, you can use ReferenceError.prototype.toString() to get the string representation of a reference error object, and ReferenceError.prototype.stack to get the stack trace of a reference error object.
console.log(SyntaxError) // SyntaxError is a global object that represents an error that occurs when a syntax error is detected in JavaScript code. It's a property of the global object, which means that it's available in any scope. SyntaxError is the base object for all other syntax error objects in JavaScript. It has methods for creating, manipulating, and querying syntax errors. For example, you can use SyntaxError.prototype.toString() to get the string representation of a syntax error object, and SyntaxError.prototype.stack to get the stack trace of a syntax error object.
console.log(TypeError) // TypeError is a global object that represents an error that occurs when a value is not of the expected type. It's a property of the global object, which means that it's available in any scope. TypeError is the base object for all other type error objects in JavaScript. It has methods for creating, manipulating, and querying type errors. For example, you can use TypeError.prototype.toString() to get the string representation of a type error object, and TypeError.prototype.stack to get the stack trace of a type error object.
console.log(URIError) // URIError is a global object that represents an error that occurs when a URI-related operation is used incorrectly. It's a property of the global object, which means that it's available in any scope. URIError is the base object for all other URI error objects in JavaScript. It has methods for creating, manipulating, and querying URI errors. For example, you can use URIError.prototype.toString() to get the string representation of a URI error object, and URIError.prototype.stack to get the stack trace of a URI error object.
console.log(InternalError) // InternalError is a global object that represents an error that occurs when an internal error is detected in JavaScript code. It's a property of the global object, which means that it's available in any scope. InternalError is the base object for all other internal error objects in JavaScript. It has methods for creating, manipulating, and querying internal errors. For example, you can use InternalError.prototype.toString() to get the string representation of an internal error object, and InternalError.prototype.stack to get the stack trace of an internal error object.